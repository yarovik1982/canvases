// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
//https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D

export class Plotter {
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	//  ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–Ω–≤–∞—Å–∞
	//  width, height - —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
	//  x0, y0 - –Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	//  xMin, xMax - –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –ø–æ –æ—Å–∏ X
	//  yMin, yMax - –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –ø–æ –æ—Å–∏ Y
	constructor(ctx, width, height, x0, y0, xMin, xMax, yMin, yMax) {
		// –°–≤–æ–π—Å—Ç–≤–∞:
		this.ctx = ctx;
		this.x0 = x0;
		this.y0 = y0;
		this.xScale = (xMax - xMin) / width;
		this.yScale = (yMax - yMin) / height;
		this.xMin = xMin / this.xScale;
		this.xMax = xMax / this.xScale;
		this.yMin = yMin / this.yScale;
		this.yMax = yMax / this.yScale;
	}
	// –ú–µ—Ç–æ–¥: –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	//  xCell - —à–∏—Ä–∏–Ω–∞ –∫–ª–µ—Ç–∫–∏
	//  yCell - –≤—ã—Å–æ—Ç–∞ –∫–ª–µ—Ç–∫–∏
	//  color - —Ü–≤–µ—Ç —Å–µ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π)
	drawGrid(xCell, yCell, color = "lightgray") {
		this.ctx.save(); // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		this.ctx.translate(this.x0, this.y0); // –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
		this.ctx.scale(1, -1); // –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

		this.ctx.lineWidth = 1;
		this.ctx.strokeStyle = color;

		this.ctx.beginPath();

		xCell /= this.xScale;
		yCell /= this.yScale;

		let x = this.xMin;
		do {
			this.ctx.moveTo(x, this.yMin);
			this.ctx.lineTo(x, this.yMax);
			x += xCell;
		} while (x <= this.xMax);

		let y = this.yMin;
		do {
			this.ctx.moveTo(this.xMin, y);
			this.ctx.lineTo(this.xMax, y);
			y += yCell;
		} while (y <= this.yMax);

		this.ctx.stroke();

		this.ctx.restore(); // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	// –ú–µ—Ç–æ–¥: –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ—Å–∏
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	//  xLabel - –º–µ—Ç–∫–∞ –æ—Å–∏ X
	//  yLabel - –º–µ—Ç–∫–∞ –æ—Å–∏ Y
	//  color  - —Ü–≤–µ—Ç –æ—Å–µ–π –∏ –º–µ—Ç–æ–∫
	//  font   - —à—Ä–∏—Ñ—Ç –º–µ—Ç–æ–∫
	drawAxes(xLabel = "x", yLabel = "y", color = "black", font = "12px Arial") {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);
		this.ctx.scale(1, -1);

		this.ctx.lineWidth = 2;
		this.ctx.strokeStyle = color;

		this.ctx.beginPath();
		this.ctx.moveTo(this.xMin, 0);
		this.ctx.lineTo(this.xMax, 0);
		this.ctx.moveTo(0, this.yMin);
		this.ctx.lineTo(0, this.yMax);
		this.ctx.stroke();

		this.ctx.scale(1, -1);

		this.ctx.fillStyle = color;
		this.ctx.font = font;
		this.ctx.textAlign = "center";
		this.ctx.textBaseline = "middle";
		this.ctx.fillText(xLabel, this.xMax + 10, -10);
		this.ctx.fillText(yLabel, 0, -this.yMax - 10);

		this.ctx.restore();
	}

	/**
	 * –†–∏—Å—É–µ—Ç –Ω–∞—Å–µ—á–∫–∏ –ø–æ –æ—Å–∏ X –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è (—Å—Ç—Ä–æ–≥–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
	 * @param {number} xCell - —à–∞–≥ –º–µ–∂–¥—É –Ω–∞—Å–µ—á–∫–∞–º–∏ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥–∞–Ω–Ω—ã—Ö)
	 * @param {string} color - —Ü–≤–µ—Ç –Ω–∞—Å–µ—á–µ–∫
	 */
	drawXTicks(xCell, color = "black") {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);
		this.ctx.scale(1, -1);

		this.ctx.lineWidth = 1;
		this.ctx.strokeStyle = color;

		this.ctx.beginPath();

		xCell /= this.xScale;

		let x = this.xMin;
		do {
			this.ctx.moveTo(x, -4); // –ë–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
			this.ctx.lineTo(x, 4); // –ë–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
			x += xCell;
		} while (x <= this.xMax);

		this.ctx.stroke();
		this.ctx.restore();
	}

	drawXTicksArray(xArray, color = "black") {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);
		this.ctx.scale(1, -1); // –ò–Ω–≤–µ—Ä—Å–∏—è Y-–æ—Å–∏

		this.ctx.lineWidth = 1;
		this.ctx.strokeStyle = color;

		this.ctx.beginPath();

		for (let i = 0; i < xArray.length; i++) {
			const x = xArray[i] / this.xScale;

			this.ctx.moveTo(x, -4); // –í–µ—Ä—Ö –Ω–∞—Å–µ—á–∫–∏
			this.ctx.lineTo(x, 4); // –ù–∏–∑ –Ω–∞—Å–µ—á–∫–∏
		}

		this.ctx.stroke();
		this.ctx.restore();
	}

	/**
	 * –†–∏—Å—É–µ—Ç –Ω–∞—Å–µ—á–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –æ—Å–∏ Y
	 * @param {number} yCell - —à–∞–≥ –º–µ–∂–¥—É –Ω–∞—Å–µ—á–∫–∞–º–∏ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥–∞–Ω–Ω—ã—Ö)
	 * @param {string} color - —Ü–≤–µ—Ç –Ω–∞—Å–µ—á–µ–∫
	 */
	drawYTicks(yCell, color = "black") {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);
		this.ctx.scale(1, -1);

		this.ctx.lineWidth = 1;
		this.ctx.strokeStyle = color;

		this.ctx.beginPath();

		yCell /= this.yScale;

		let y = this.yMin;
		do {
			this.ctx.moveTo(-4, y);
			this.ctx.lineTo(4, y);
			y += yCell;
		} while (y <= this.yMax);

		this.ctx.stroke();
		this.ctx.restore();
	}

	// –ú–µ—Ç–æ–¥: –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –ø–æ –æ—Å–∏ Y
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	//  xCell - —à–∏—Ä–∏–Ω–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ –æ—Å–∏ X (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)
	//  yCell - –≤—ã—Å–æ—Ç–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ –æ—Å–∏ Y
	//  color - —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
	//  font  - —à—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞
	drawUnitsY(yCell, color = "black", font = "10px Arial") {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);

		this.ctx.fillStyle = color;
		this.ctx.font = font;

		yCell /= this.yScale;

		this.ctx.textAlign = "left";
		this.ctx.textBaseline = "top";

		let y = this.yMin;
		do {
			this.ctx.fillText(y * this.yScale, 4, -y + 4);
			y += yCell;
		} while (y <= this.yMax);

		this.ctx.restore();
	}

	/*
    –†–∏—Å—É–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X —Å–æ–≥–ª–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É
   @param {Array} xValues - –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X (–Ω–∞–ø—Ä–∏–º–µ—Ä, [0, 5, 7, 8, 20])
   * @param {string} color - —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
   * @param {string} font - —à—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞
   * @param {number} yOffset - —Å–º–µ—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Å–∏ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
   */
	drawXAxisValues(xValues, color = "black", font = "10px Arial", yOffset = 15) {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);

		this.ctx.fillStyle = color;
		this.ctx.font = font;
		this.ctx.textAlign = "center";
		this.ctx.textBaseline = "top";

		// –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
		xValues.forEach((value) => {
			const x = value / this.xScale; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–Ω–≤–∞—Å–∞
			this.ctx.fillText(value.toString(), x, yOffset);

			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∏—Å—É–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –æ—Ç–º–µ—Ç–∫—É –Ω–∞ –æ—Å–∏
			this.ctx.beginPath();
			this.ctx.moveTo(x, 0);
			this.ctx.lineTo(x, 5);
			this.ctx.stroke();
		});

		this.ctx.restore();
	}

	/**
	 * –†–∏—Å—É–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –µ–¥–∏–Ω–∏—Ü –ø–æ –æ—Å–∏ X —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –≤–ø—Ä–∞–≤–æ
	 * @param {number} xCell - —à–∞–≥ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å—è–º–∏ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥–∞–Ω–Ω—ã—Ö)
	 * @param {string} color - —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
	 * @param {string} font - —à—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞
	 * @param {number} xOffset - —Å–º–µ—â–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2px)
	 */
	drawUnitsX(xCell, color = "black", font = "10px Arial", xOffset = 2) {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);

		this.ctx.fillStyle = color;
		this.ctx.font = font;
		this.ctx.textAlign = "center";
		this.ctx.textBaseline = "top";

		// –ü–µ—Ä–µ–≤–æ–¥–∏–º xCell –∏–∑ –µ–¥–∏–Ω–∏—Ü –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∏–∫—Å–µ–ª–∏
		xCell /= this.xScale;

		// –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –≤–¥–æ–ª—å –æ—Å–∏ X —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
		let x = this.xMin;
		do {
			const label = x * this.xScale;
			this.ctx.fillText(label, x + xOffset, 4); // –î–æ–±–∞–≤–ª–µ–Ω–æ xOffset –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ X
			x += xCell;
		} while (x <= this.xMax);

		this.ctx.restore();
	}

	// –ú–µ—Ç–æ–¥: –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
	//  xArray - –º–∞—Å—Å–∏–≤ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	//  yArray - –º–∞—Å—Å–∏–≤ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	//  color  - —Ü–≤–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
	//  dots   - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏?
	//  line   - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏–Ω–∏—é?
	drawGraph(xArray, yArray, color = "blue", dots = false, line = true) {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);

		this.ctx.lineWidth = 1;
		this.ctx.strokeStyle = color;
		this.ctx.fillStyle = color;
		this.ctx.font = "10px Arial";
		this.ctx.textAlign = "center";
		this.ctx.textBaseline = "middle";

		// üß≠ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
		this.ctx.beginPath();
		for (let i = 0; i < xArray.length; i++) {
			let x = xArray[i] / this.xScale;
			let y = -yArray[i] / this.yScale;

			if (line && i !== 0) {
				this.ctx.lineTo(x, y);
			} else {
				this.ctx.moveTo(x, y);
			}
		}
		this.ctx.stroke(); // ‚ú® –í–ê–ñ–ù–û: —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞

		// üîµ –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è Y
		for (let i = 0; i < xArray.length; i++) {
			let x = xArray[i] / this.xScale;
			let y = -yArray[i] / this.yScale;

			if (dots) {
				this.ctx.beginPath();
				this.ctx.arc(x, y, 2, 0, 2 * Math.PI);
				this.ctx.fill();
			}

			// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ Y –Ω–∞–¥ —Ç–æ—á–∫–æ–π
			this.ctx.fillText(yArray[i].toString(), x, y - 10);

			// üìè –ù–∞—Å–µ—á–∫–∞ –Ω–∞ –æ—Å–∏ X
			this.ctx.beginPath();
			this.ctx.moveTo(x, 0);
			this.ctx.lineTo(x, 5);
			this.ctx.stroke();

			// –ü–æ–¥–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è X –ø–æ–¥ –æ—Å—å—é
			this.ctx.fillText(xArray[i].toString(), x, 15);
		}

		this.ctx.restore();
	}

	// –î–ª—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–∏
	drawDashedLine(x1, y1, x2, y2, color = "red", pattern = [5, 3]) {
		this.ctx.save();
		this.ctx.translate(this.x0, this.y0);
		this.ctx.scale(1, -1); // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—å Y

		this.ctx.strokeStyle = color;
		this.ctx.lineWidth = 1;
		this.ctx.setLineDash(pattern);

		this.ctx.beginPath();
		this.ctx.moveTo(x1 / this.xScale, y1 / this.yScale);
		this.ctx.lineTo(x2 / this.xScale, y2 / this.yScale);
		this.ctx.stroke();

		this.ctx.restore();
	}

	clearCanvas() {
		this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
	}
}
